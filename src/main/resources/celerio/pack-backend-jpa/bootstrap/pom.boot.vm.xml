$output.file("pom.xml")##
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>$configuration.rootPackage</groupId>
    <artifactId>$configuration.applicationName</artifactId>
    <packaging>jar</packaging>
    <version>1.0.0-SNAPSHOT</version>
    <name>$configuration.applicationName</name>
    
    <parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.0.M3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
    
    <properties>
        <!-- ~~~~~~~~ -->
        <!-- Database -->
        <!-- ~~~~~~~~ -->
        <!-- Note: during development using the same value for your login, password, database name and project name is really convenient -->
        <database.name>${dollar}{project.name}</database.name>
        <database.host>localhost</database.host>
        <database.user>${dollar}{project.name}</database.user>
        <database.password>${dollar}{project.name}</database.password>

#if ($jdbcConnectivity.isValid())
        <!-- **** DO NOT USE A PRODUCTION DATABASE **** -->

<jdbc.type>todo</jdbc.type><!-- see 'db' profile, it is used to find the sql script -->
        <!-- jdbc driver -->
        <jdbc.groupId>$jdbcConnectivity.driverGroupId</jdbc.groupId>
        <jdbc.artifactId>$jdbcConnectivity.driverArtifactId</jdbc.artifactId>
        <jdbc.version>$jdbcConnectivity.driverArtifactIdVersion</jdbc.version>

        <!-- jdbc settings -->
        <jdbc.driver>$jdbcConnectivity.driver</jdbc.driver>
        <jdbc.url>$jdbcConnectivity.url</jdbc.url>
        <jdbc.user>$jdbcConnectivity.user</jdbc.user>
        <jdbc.password>$jdbcConnectivity.password</jdbc.password>
        <jdbc.catalog>$jdbcConnectivity.catalog</jdbc.catalog>

        <hibernate.dialect>$jdbcConnectivity.hibernateDialect</hibernate.dialect>
        <sql-maven-plugin.delimiter>$jdbcConnectivity.sqlDelimiter</sql-maven-plugin.delimiter>
#else
        <!-- **** CHANGE THE PROPERTIES BELOW TO USE YOUR OWN DATABASE **** -->
        <!-- **** DO NOT USE A PRODUCTION DATABASE **** -->
        <jdbc.type>h2</jdbc.type>
<!-- see 'db' profile, it is used to find the sql script -->

        <!-- h2 jdbc driver -->
        <jdbc.groupId>com.h2database</jdbc.groupId>
        <jdbc.artifactId>h2</jdbc.artifactId>
        <jdbc.version>1.4.190</jdbc.version>

        <!-- h2 jdbc settings -->
        <jdbc.driver>org.h2.Driver</jdbc.driver>
        <jdbc.url>jdbc:h2:~/.h2/${dollar}{database.name};MVCC=TRUE;FILE_LOCK=NO</jdbc.url>
        <jdbc.user>${dollar}{database.user}</jdbc.user>
        <jdbc.password>${dollar}{database.password}</jdbc.password>
        <jdbc.catalog></jdbc.catalog>
        <hibernate.dialect>org.hibernate.dialect.H2Dialect</hibernate.dialect>
        <sql-maven-plugin.delimiter>;</sql-maven-plugin.delimiter>
#end

        <!-- ~~~~~~ -->
        <!-- System -->
        <!-- ~~~~~~ -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- Version dependencies when used in multiple dependencies -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <celerio-maven-plugin.outputDir>${dollar}{project.basedir}</celerio-maven-plugin.outputDir>
        <celerio-maven-plugin.version>$generation.version</celerio-maven-plugin.version>
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- Variables substituted in resources file at build time -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- logs -->
        <log.target>${dollar}{project.build.directory}/logs</log.target>
        <log.level>DEBUG</log.level>
        <log.sql.queries.level>DEBUG</log.sql.queries.level>
        <!-- hibernate, see by src/main/resource/hibernate.properties -->
        <hibernate.show.sql>true</hibernate.show.sql>
        <hibernate.format.sql>true</hibernate.format.sql>
        <hibernate.generate_statistics>true</hibernate.generate_statistics>
        <hibernate.use_sql_comments>true</hibernate.use_sql_comments>
        <hibernate.ehcache.configuration.file>ehcache.xml</hibernate.ehcache.configuration.file>
        <hibernate.use.second.level.cache>true</hibernate.use.second.level.cache>
        <hibernate.use.query.cache>true</hibernate.use.query.cache>
    </properties>
    <profiles>
        <profile>
            <!-- ~~~~~~~~~~~~~~~~~~~ -->
            <!-- Disable debug modes -->
            <!-- ~~~~~~~~~~~~~~~~~~~ -->
            <id>perf</id>
            <properties>
                <hibernate.show.sql>false</hibernate.show.sql>
                <hibernate.format.sql>false</hibernate.format.sql>
                <hibernate.use_sql_comments>false</hibernate.use_sql_comments>
                <hibernate.generate_statistics>false</hibernate.generate_statistics>
                <log.level>WARN</log.level>
                <log.sql.queries.level>WARN</log.sql.queries.level>
            </properties>
        </profile>
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- Drop and recreate the database -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
#if (!$jdbcConnectivity.isValid())
        <profile>
            <id>db</id>
            <build>
                <defaultGoal>initialize</defaultGoal>
                <plugins>
                    <plugin>
                        <!-- http://mojo.codehaus.org/sql-maven-plugin/ -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>sql-maven-plugin</artifactId>
                        <version>1.5</version>
                        <executions>
                            <execution>
                                <id>Create and initialize the database</id>
                                <phase>initialize</phase>
                                <configuration>
                                    <driver>${dollar}{jdbc.driver}</driver>
                                    <url>${dollar}{jdbc.url}</url>
                                    <username>${dollar}{jdbc.user}</username>
                                    <password>${dollar}{jdbc.password}</password>
                                    <autocommit>true</autocommit>
                                    <encoding>UTF-8</encoding>
                                    <printResultSet>true</printResultSet>
                                    <onError>continue</onError>
                                    <delimiter>${dollar}{sql-maven-plugin.delimiter}</delimiter>
                                    <orderFile>ascending</orderFile>
                                    <fileset>
                                        <basedir>${dollar}{project.basedir}</basedir>
                                        <includes>
                                            <include>src/main/sql/${dollar}{jdbc.type}/*.sql</include>
                                        </includes>
                                    </fileset>
                                </configuration>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>${dollar}{jdbc.groupId}</groupId>
                                <artifactId>${dollar}{jdbc.artifactId}</artifactId>
                                <version>${dollar}{jdbc.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>
#end
        <!-- Profiles below are used when Celerio Maven Plugin is present in the build process -->
        <profile>
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <!-- Extract the database metadata -->
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <id>metadata</id>
            <build>
                <defaultGoal>generate-sources</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>com.jaxio.celerio</groupId>
                        <artifactId>dbmetadata-maven-plugin</artifactId>
                        <version>${dollar}{celerio-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>Extract the database schema.</id>
                                <goals>
                                    <goal>extract-metadata</goal>
                                </goals>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>${dollar}{jdbc.groupId}</groupId>
                                <artifactId>${dollar}{jdbc.artifactId}</artifactId>
                                <version>${dollar}{jdbc.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <!-- Generate the code using Celerio -->
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <id>gen</id>
            <build>
                <defaultGoal>generate-sources</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>com.jaxio.celerio</groupId>
                        <artifactId>celerio-maven-plugin</artifactId>
                        <version>${dollar}{celerio-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>Generates files using the extracted database schema.</id>
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>com.jaxio.celerio.packs</groupId>
                                <artifactId>pack-backend-jpa</artifactId>
                                <version>1.0.4</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <!-- Delete code generated by Celerio -->
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <id>cleanGen</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.jaxio.celerio</groupId>
                        <artifactId>celerio-maven-plugin</artifactId>
                        <version>${dollar}{celerio-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>Delete previously generated files (use .celerio/ folder)</id>
                                <goals>
                                    <goal>cleanGenerated</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    <!-- ~~~~~~~~~~~~ -->
    <!-- DEPENDENCIES -->
    <!-- ~~~~~~~~~~~~ -->
  <dependencies>
    	<!-- ~~~~~~ -->
        <!-- SPRING -->
        <!-- ~~~~~~ -->
  		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-solr</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <version>1</version>
        </dependency>
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- List your specific dependencies below -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- Dependencies needed by the generated project -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

        <!-- ~~~~~~~~~~~ -->
        <!-- PERSISTENCE -->
        <!-- ~~~~~~~~~~~ -->

        <!-- https://github.com/jaxio/jpa-query-by-example -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-ehcache</artifactId>
        </dependency>

        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
            <version>3.1</version>
            <scope>runtime</scope>
        </dependency>
        <!-- ~~~~~~~~~~~~~~~~ -->
        <!-- HIBERNATE SEARCH -->
        <!-- ~~~~~~~~~~~~~~~~ -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-search</artifactId>
            <version>5.11.1.Final</version>
            <exclusions>
                <exclusion>
                    <artifactId>lucene-kuromoji</artifactId>
                    <groupId>org.apache.lucene</groupId>
                </exclusion>
                <exclusion>
		            <groupId>org.hibernate</groupId>
		            <artifactId>hibernate-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>5.2.2.Final</version>
        </dependency>
        <!--Hibernate Validator requires an implementation of the Unified Expression Language (JSR 341) -->
        <dependency>
            <groupId>javax.el</groupId>
            <artifactId>javax.el-api</artifactId>
            <version>2.2.4</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>javax.el</artifactId>
            <version>2.2.4</version>
        </dependency>
        <!-- validation html -->
        <dependency>
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>1.8.3</version>
        </dependency>
        <!-- ~~~~~ -->
        <!-- UTILS -->
        <!-- ~~~~~ -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.9.2</version>
            <exclusions>
                <exclusion>
                    <artifactId>commons-logging</artifactId>
                    <groupId>commons-logging</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-text -->
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-text</artifactId>
		    <version>1.6</version>
		</dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.6</version>
        </dependency>
        <!-- ~~~~~~~~~~ -->
        <!-- MONITORING -->
        <!-- ~~~~~~~~~~ -->
        <dependency>
            <groupId>net.bull.javamelody</groupId>
            <artifactId>javamelody-core</artifactId>
            <version>1.57.0</version>
        </dependency>
        <!-- ~~~~ -->
        <!-- TEST -->
        <!-- ~~~~ -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.10.19</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.easytesting</groupId>
            <artifactId>fest-assert</artifactId>
            <version>1.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <!-- ~~~~~~~~~~~~ -->
    <!-- REPOSITORIES -->
    <!-- ~~~~~~~~~~~~ -->
    <pluginRepositories>
        <pluginRepository>
            <id>Codehaus Snapshots</id>
            <url>https://nexus.codehaus.org/content/repositories/releases</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>
    <repositories>
    	<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
		</repository>
        <repository>
            <id>jboss</id>
            <url>http://repository.jboss.org/nexus/content/groups/public-jboss</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <!-- ~~~~~ -->
    <!-- BUILD -->
    <!-- ~~~~~ -->
    <build>
        <defaultGoal>test</defaultGoal>
        <resources>
            <resource>
                <directory>${dollar}{celerio-maven-plugin.outputDir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>${dollar}{celerio-maven-plugin.outputDir}/src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <!-- http://maven.apache.org/plugins/maven-resources-plugin/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <delimiters>
                        <delimiter>@*@</delimiter>
                    </delimiters>
                    <useDefaultDelimiters>false</useDefaultDelimiters>
                    <nonFilteredFileExtensions>
                        <nonFilteredFileExtension>xls</nonFilteredFileExtension>
                        <nonFilteredFileExtension>xlsx</nonFilteredFileExtension>
                        <nonFilteredFileExtension>pdf</nonFilteredFileExtension>
                    </nonFilteredFileExtensions>
                </configuration>
            </plugin>
            <plugin>
                <!-- http://maven.apache.org/plugins/maven-compiler-plugin/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <compilerArgument>-Xlint</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
#if($config.requiresJavaBuildHelper($JAVA) || $config.requiresJavaBuildHelper($JAVA_TEST))
            <plugin>
                <!-- http://mojo.codehaus.org/build-helper-maven-plugin/ -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
#if($config.requiresJavaBuildHelper($JAVA))
                    <execution>
                        <id>Adding generated java folder to build</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${dollar}{celerio-maven-plugin.outputDir}/${JAVA.unixFolder}</source>
#if(!$JAVA.sameAsGeneratedFolder())
                                <source>${dollar}{celerio-maven-plugin.outputDir}/${JAVA.unixGeneratedFolder}</source>
#end
                            </sources>
                        </configuration>
                    </execution>
#end
#if($config.requiresJavaBuildHelper($JAVA_TEST))
                    <execution>
                        <id>Adding generated java test location to test build</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${dollar}{celerio-maven-plugin.outputDir}/${JAVA_TEST.unixFolder}</source>
#if(!$JAVA_TEST.sameAsGeneratedFolder())
                                <source>${dollar}{celerio-maven-plugin.outputDir}/${JAVA_TEST.unixGeneratedFolder}</source>
#end
                            </sources>
                        </configuration>
                    </execution>
#end
                </executions>
            </plugin>
#end
#if($project.entitiesWithFiles.isNotEmpty())
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.7</version>
                <executions>
                    <execution>
                        <id>instrument jpa model to support lazy loading of files</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <taskdef name="instrument"
                                         classname="org.hibernate.tool.instrument.javassist.InstrumentTask">
                                    <classpath>
                                        <path refid="maven.dependency.classpath"/>
                                        <path refid="maven.runtime.classpath"/>
                                    </classpath>
                                </taskdef>
                                <instrument verbose="true">
                                    <fileset dir="${dollar}{project.build.outputDirectory}">
#foreach($entity in $project.entitiesWithFiles.list)
                                        <include name="${entity.model.fullType.replace(".","/")}.class" />
#end
                                    </fileset>
                                </instrument>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
#end
            <plugin>
                <!-- http://maven.apache.org/plugins/maven-install-plugin/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
            </plugin>
            <plugin>
                <!-- http://maven.apache.org/plugins/maven-clean-plugin/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
            </plugin>
            <plugin>
                <!-- http://maven.apache.org/plugins/maven-surefire-plugin/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <!-- surefire uses a new jvm, MAVEN_OPTS are ignored, so you better set the memory options here -->
                    <argLine>-Xmx512m -XX:MaxPermSize=256m</argLine>
                </configuration>
            </plugin>
            <plugin>
                <!-- http://maven.apache.org/plugins/maven-failsafe-plugin/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>verify</id>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- http://maven.apache.org/plugins/maven-release-plugin/ -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.5.2</version>
                <configuration>
                    <arguments>-Pdb,metadata,gen</arguments>
                    <releaseProfiles>db,metadata,gen</releaseProfiles>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <dependencyManagement>
    	<dependencies>
    		<dependency>
    			<groupId>org.springframework</groupId>
    			<artifactId>spring-core</artifactId>
    			<version>5.2.0.M2</version>
    		</dependency>
    	</dependencies>
    </dependencyManagement>
</project>
